// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	contracts "gameoflife/contracts"

	mock "github.com/stretchr/testify/mock"

	testing "testing"

	utils "gameoflife/utils"
)

// CardSetI is an autogenerated mock type for the CardSetI type
type CardSetI struct {
	mock.Mock
}

// AddCardToSet provides a mock function with given fields: executor, cardId
func (_m *CardSetI) AddCardToSet(executor utils.UserID, cardId utils.CardID) error {
	ret := _m.Called(executor, cardId)

	var r0 error
	if rf, ok := ret.Get(0).(func(utils.UserID, utils.CardID) error); ok {
		r0 = rf(executor, cardId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChangeCardFromSet provides a mock function with given fields: executor, cardIdLast, cardIdNew
func (_m *CardSetI) ChangeCardFromSet(executor utils.UserID, cardIdLast utils.CardID, cardIdNew utils.CardID) error {
	ret := _m.Called(executor, cardIdLast, cardIdNew)

	var r0 error
	if rf, ok := ret.Get(0).(func(utils.UserID, utils.CardID, utils.CardID) error); ok {
		r0 = rf(executor, cardIdLast, cardIdNew)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetActualSet provides a mock function with given fields: user
func (_m *CardSetI) GetActualSet(user utils.UserID) []utils.CardID {
	ret := _m.Called(user)

	var r0 []utils.CardID
	if rf, ok := ret.Get(0).(func(utils.UserID) []utils.CardID); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]utils.CardID)
		}
	}

	return r0
}

// GetUserAttributes provides a mock function with given fields: user
func (_m *CardSetI) GetUserAttributes(user utils.UserID) []contracts.CardParams {
	ret := _m.Called(user)

	var r0 []contracts.CardParams
	if rf, ok := ret.Get(0).(func(utils.UserID) []contracts.CardParams); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]contracts.CardParams)
		}
	}

	return r0
}

// RemoveCardFromSet provides a mock function with given fields: executor, cardId
func (_m *CardSetI) RemoveCardFromSet(executor utils.UserID, cardId utils.CardID) error {
	ret := _m.Called(executor, cardId)

	var r0 error
	if rf, ok := ret.Get(0).(func(utils.UserID, utils.CardID) error); ok {
		r0 = rf(executor, cardId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetUserAttributes provides a mock function with given fields: executor, values
func (_m *CardSetI) SetUserAttributes(executor utils.UserID, values []contracts.CardParams) error {
	ret := _m.Called(executor, values)

	var r0 error
	if rf, ok := ret.Get(0).(func(utils.UserID, []contracts.CardParams) error); ok {
		r0 = rf(executor, values)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCardSetI creates a new instance of CardSetI. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewCardSetI(t testing.TB) *CardSetI {
	mock := &CardSetI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
