// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	contracts "gameoflife/contracts"

	mock "github.com/stretchr/testify/mock"

	testing "testing"

	utils "gameoflife/utils"
)

// CardsI is an autogenerated mock type for the CardsI type
type CardsI struct {
	mock.Mock
}

// Burn provides a mock function with given fields: cardId, executor
func (_m *CardsI) Burn(cardId utils.CardID, executor utils.UserID) error {
	ret := _m.Called(cardId, executor)

	var r0 error
	if rf, ok := ret.Get(0).(func(utils.CardID, utils.UserID) error); ok {
		r0 = rf(cardId, executor)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Freeze provides a mock function with given fields: cardId1, cardId2, executor
func (_m *CardsI) Freeze(cardId1 utils.CardID, cardId2 utils.CardID, executor utils.UserID) error {
	ret := _m.Called(cardId1, cardId2, executor)

	var r0 error
	if rf, ok := ret.Get(0).(func(utils.CardID, utils.CardID, utils.UserID) error); ok {
		r0 = rf(cardId1, cardId2, executor)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCardOwner provides a mock function with given fields: cardId
func (_m *CardsI) GetCardOwner(cardId utils.CardID) (utils.UserID, error) {
	ret := _m.Called(cardId)

	var r0 utils.UserID
	if rf, ok := ret.Get(0).(func(utils.CardID) utils.UserID); ok {
		r0 = rf(cardId)
	} else {
		r0 = ret.Get(0).(utils.UserID)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(utils.CardID) error); ok {
		r1 = rf(cardId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCardProperties provides a mock function with given fields: cardId
func (_m *CardsI) GetCardProperties(cardId utils.CardID) (contracts.CardParams, error) {
	ret := _m.Called(cardId)

	var r0 contracts.CardParams
	if rf, ok := ret.Get(0).(func(utils.CardID) contracts.CardParams); ok {
		r0 = rf(cardId)
	} else {
		r0 = ret.Get(0).(contracts.CardParams)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(utils.CardID) error); ok {
		r1 = rf(cardId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFreezeTime provides a mock function with given fields: cardId
func (_m *CardsI) GetFreezeTime(cardId utils.CardID) int64 {
	ret := _m.Called(cardId)

	var r0 int64
	if rf, ok := ret.Get(0).(func(utils.CardID) int64); ok {
		r0 = rf(cardId)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// GetOwnersCards provides a mock function with given fields: executor
func (_m *CardsI) GetOwnersCards(executor utils.UserID) []contracts.Card {
	ret := _m.Called(executor)

	var r0 []contracts.Card
	if rf, ok := ret.Get(0).(func(utils.UserID) []contracts.Card); ok {
		r0 = rf(executor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]contracts.Card)
		}
	}

	return r0
}

// IsFreezed provides a mock function with given fields: cardId
func (_m *CardsI) IsFreezed(cardId utils.CardID) bool {
	ret := _m.Called(cardId)

	var r0 bool
	if rf, ok := ret.Get(0).(func(utils.CardID) bool); ok {
		r0 = rf(cardId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsOwner provides a mock function with given fields: cardId, executor
func (_m *CardsI) IsOwner(cardId utils.CardID, executor utils.UserID) error {
	ret := _m.Called(cardId, executor)

	var r0 error
	if rf, ok := ret.Get(0).(func(utils.CardID, utils.UserID) error); ok {
		r0 = rf(cardId, executor)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MintNewCard provides a mock function with given fields: executor
func (_m *CardsI) MintNewCard(executor utils.UserID) (utils.CardID, error) {
	ret := _m.Called(executor)

	var r0 utils.CardID
	if rf, ok := ret.Get(0).(func(utils.UserID) utils.CardID); ok {
		r0 = rf(executor)
	} else {
		r0 = ret.Get(0).(utils.CardID)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(utils.UserID) error); ok {
		r1 = rf(executor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Transfer provides a mock function with given fields: cardId, executor, to
func (_m *CardsI) Transfer(cardId utils.CardID, executor utils.UserID, to utils.UserID) error {
	ret := _m.Called(cardId, executor, to)

	var r0 error
	if rf, ok := ret.Get(0).(func(utils.CardID, utils.UserID, utils.UserID) error); ok {
		r0 = rf(cardId, executor, to)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnFreeze provides a mock function with given fields: cardId, executor
func (_m *CardsI) UnFreeze(cardId utils.CardID, executor utils.UserID) error {
	ret := _m.Called(cardId, executor)

	var r0 error
	if rf, ok := ret.Get(0).(func(utils.CardID, utils.UserID) error); ok {
		r0 = rf(cardId, executor)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCardsI creates a new instance of CardsI. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewCardsI(t testing.TB) *CardsI {
	mock := &CardsI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
